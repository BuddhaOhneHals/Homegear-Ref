{
	"name": "Homegear::registerThread",
	"category": "General",
	"shortDescription": "Makes a new thread known to Homegear.",
	"description": "This method makes a new thread known to Homegear. This is needed to be able to receive events.",
	"signatures": ["bool registerThread(string scriptId)"],
	"parameters": [{
		"name": "scriptId",
		"type": "string",
		"description": "The script id and token as returned by \"<a href=\"#HomegeargetScriptId\">getScriptId()</a>\". Note that \"<a href=\"#HomegeargetScriptId\">getScriptId()</a>\" only can be called in main thread or after registerThread() has been called.",
		"exampleValue": "3,MTIzNDU2Nzg5MDEyMzQ1Ng=="
	}],
	"returnValue": "Returns true on success and false if no matching thread could be found.",
	"exampleOutput": [{
		"call": "registerThread(\"3,MTIzNDU2Nzg5MDEyMzQ1Ng==\")",
		"output": "dHJ1ZQ=="
	}],
	"example": "PD9waHANCi8qKg0KICogQ2xhc3MgdG8gc2hhcmUgZGF0YSBiZXR3ZWVuIHRoZSBtYWluIHNjcmlwdCBhbmQgdGhlIGV2ZW50IHRocmVhZC4NCiAqLw0KY2xhc3MgU2hhcmVkRGF0YSBleHRlbmRzIFRocmVhZGVkDQp7DQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRzY3JpcHRJZCkNCiAgICB7DQogICAgICAgICR0aGlzLT5zY3JpcHRJZCA9ICRzY3JpcHRJZDsNCiAgICAgICAgJHRoaXMtPnJlc2V0RGF0YSgpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiByZXNldERhdGEoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnBlZXJJZCA9IDA7DQogICAgICAgICR0aGlzLT52YXJpYWJsZSA9ICcnOw0KICAgICAgICAkdGhpcy0+dmFsdWUgPSAwOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRwZWVySWQsICR2YXJpYWJsZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnBlZXJJZCA9ICRwZWVySWQ7DQogICAgICAgICR0aGlzLT52YXJpYWJsZSA9ICR2YXJpYWJsZTsNCiAgICAgICAgJHRoaXMtPnZhbHVlID0gJHZhbHVlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRQZWVySWQoKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICR0aGlzLT5wZWVySWQ7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIGdldFZhcmlhYmxlKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+dmFyaWFibGU7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIGdldFZhbHVlKCkNCiAgICB7DQogICAgICAgIHJldHVybiAkdGhpcy0+dmFsdWU7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIHJ1bigpIHt9DQp9DQoNCi8qKg0KICogQ2xhc3MgdG8gcHJvY2VzcyBldmVudHMgcmVjZWl2ZWQgZnJvbSBIb21lZ2Vhcg0KICovDQpjbGFzcyBFdmVudFRocmVhZCBleHRlbmRzIFRocmVhZA0Kew0KICAgIHByaXZhdGUgJHNoYXJlZERhdGE7DQogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRzaGFyZWREYXRhKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPnNoYXJlZERhdGEgPSAkc2hhcmVkRGF0YTsNCiAgICB9DQogICAgDQogICAgcHVibGljIGZ1bmN0aW9uIHJ1bigpDQogICAgew0KICAgICAgICAkaGcgPSBuZXcgXEhvbWVnZWFyXEhvbWVnZWFyKCk7DQogICAgICAgIC8vIE1ha2UgdGhlIG5ldyB0aHJlYWQga25vd24gdG8gSG9tZWdlYXIuIFdpdGhvdXQgdGhpcywgcG9sbEV2ZW50KCkgaXMgbm90IHdvcmtpbmcuDQogICAgICAgIGlmKCRoZy0+cmVnaXN0ZXJUaHJlYWQoJHRoaXMtPnNoYXJlZERhdGEtPnNjcmlwdElkKSA9PT0gZmFsc2UpDQogICAgICAgIHsNCiAgICAgICAgICAgICRoZy0+bG9nKDIsICJDb3VsZCBub3QgcmVnaXN0ZXIgdGhyZWFkLiIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gR2V0IGFsbCBkZXZpY2VzDQogICAgICAgICRkZXZpY2VzID0gJGhnLT5saXN0RGV2aWNlcyhmYWxzZSwgYXJyYXkoIklEIikpOw0KICAgICAgICBmb3JlYWNoKCRkZXZpY2VzIGFzICRkZXZpY2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIFN1YnNjcmliZSB0byBkZXZpY2UgdG8gcmVjZWl2ZSBldmVudHMuDQogICAgICAgICAgICAkaGctPnN1YnNjcmliZVBlZXIoJGRldmljZVsiSUQiXSk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vIFJ1biB0aGUgdGhyZWFkIHVudGlsIEhvbWVnZWFyIHNodXRzIGRvd24uDQogICAgICAgIHdoaWxlKCEkaGctPnNodXR0aW5nRG93bigpKQ0KICAgICAgICB7DQogICAgICAgICAgICAkcmVzdWx0ID0gJGhnLT5wb2xsRXZlbnQoKTsNCiAgICAgICAgICAgIGlmKCRyZXN1bHQgIT09IGZhbHNlICYmICRyZXN1bHRbIlRZUEUiXSA9PSAiZXZlbnQiKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIFBhc3MgcmVzdWx0IHRvIG1haW4gdGhyZWFkDQogICAgICAgICAgICAgICAgJHRoaXMtPnNoYXJlZERhdGEtPnNldERhdGEoJHJlc3VsdFsiUEVFUklEIl0sICRyZXN1bHRbIlZBUklBQkxFIl0sICRyZXN1bHRbIlZBTFVFIl0pOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vIFdha2UgdXAgbWFpbiB0aHJlYWQNCiAgICAgICAgICAgICAgICAkdGhpcy0+c3luY2hyb25pemVkKGZ1bmN0aW9uKCR0aHJlYWQpeyAkdGhyZWFkLT5ub3RpZnkoKTsgfSwgJHRoaXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQokaGcgPSBuZXcgXEhvbWVnZWFyXEhvbWVnZWFyKCk7DQoNCi8vIEdldCBzY3JpcHQgaWQgYW5kIHBhc3N3b3JkIHRva2VuLg0KJHNjcmlwdElkID0gJGhnLT5nZXRTY3JpcHRJZCgpOw0KDQovLyBDcmVhdGUgbmV3IG9iamVjdCBmb3Igc2hhcmluZyBkYXRhIGJldHdlZW4gbWFpbiBhbmQgZXZlbnQgdGhyZWFkLg0KJHNoYXJlZERhdGEgPSBuZXcgU2hhcmVkRGF0YSgkc2NyaXB0SWQpOw0KDQovLyBDcmVhdGUgYW5kIHN0YXJ0IG5ldyBldmVudCB0aHJlYWQuDQokdGhyZWFkID0gbmV3IEV2ZW50VGhyZWFkKCRzaGFyZWREYXRhKTsNCiR0aHJlYWQtPnN0YXJ0KCk7DQoNCi8vIFJ1biBtYWluIHRocmVhZCB1bnRpbCBIb21lZ2VhciBzaHV0cyBkb3duLg0Kd2hpbGUoISRoZy0+c2h1dHRpbmdEb3duKCkpDQp7DQogICAgLy8gV2FpdCB0byBiZSBub3RpZmllZCBieSBldmVudCB0aHJlYWQgd2l0aCBhIHRpbWVvdXQgb2YgNSBzZWNvbmRzLg0KICAgICR0aHJlYWQtPnN5bmNocm9uaXplZChmdW5jdGlvbigkdGhyZWFkKXsgJHRocmVhZC0+d2FpdCg1MDAwMDAwKTsgfSwgJHRocmVhZCk7DQogICAgDQogICAgLy8gQ2hlY2sgaWYgbmV3IGRhdGEgaXMgYXZhaWxhYmxlIHdhcyBzZXQuDQogICAgaWYoJHNoYXJlZERhdGEtPmdldFZhcmlhYmxlKCkpDQogICAgew0KICAgICAgICAvLyBQcmludCB2YXJpYWJsZSBuYW1lIGFuZCB2YWx1ZSBvZiBsYXN0IGV2ZW50IHRvIGxvZy4NCiAgICAgICAgJGhnLT5sb2coNCwgIkdvdCBldmVudDogUGVlcjogIi4kc2hhcmVkRGF0YS0+Z2V0UGVlcklkKCkuIiwgdmFyaWFibGU6ICIuJHNoYXJlZERhdGEtPmdldFZhcmlhYmxlKCkuIiwgdmFsdWU6ICIuJHNoYXJlZERhdGEtPmdldFZhbHVlKCkpOw0KICAgICAgICAvLyBSZXNldCBkYXRhLg0KICAgICAgICAkc2hhcmVkRGF0YS0+cmVzZXREYXRhKCk7DQogICAgfQ0KfQ0KDQovLyBXYWl0IGZvciBldmVudCB0aHJlYWQgdG8gZmluaXNoLg0KJHRocmVhZC0+am9pbigpOw0KPz4="
}
