{
	"name": "HomegearSerial::readline",
	"category": "Serial Communication (TTY)",
	"shortDescription": "Reads data from a serial device",
	"description": "This method reads one line of data (terminated by a new line character: 0x0A, \"\\n\" or 0x0D0A, \"\\r\\n\") from a serial device that was previously opened with HomegearSerial::open().",
	"signatures": ["string readline(resource $handle, int $timeout)"],
	"parameters": [{
		"name": "handle",
		"type": "resource",
		"description": "The file pointer resource returned by HomegearSerial::open()",
		"exampleValue": ""
	}, {
		"name": "timeout",
		"type": "int",
		"description": "The maximum amount of time that the system should wait for data (in milliseconds)",
		"exampleValue": "5000"
	}],
	"returnValue": "Returns the read data as string on success",
	"errors": [{
		"code": -1,
		"description": "Error reading from device"
	}, {
		"code": -2,
		"description": "Timeout"
	}],
	"example": "PD9waHANCi8qKg0KICogVGhpcyBleGFtcGxlIHNob3dzIHlvdSBob3cgdG8gc2VuZCBhbmQgcmVjZWl2ZSBGUzIwIHBhY2tldHMgd2l0aCBhIENVTCBzdGljay4NCiAqIEl0IGxvZ3MgYWxsIHJlY2VpdmVkIEZTMjAgcGFja2V0cyBhbmQgc3dpdGNoZXMgYSBzd2l0Y2ggb24gYW5kIG9mZi4NCiAqLw0KDQpkZWZpbmUoIkNVTF9ERVZJQ0UiLCAiL2Rldi90dHlBQ00wIik7DQpkZWZpbmUoIlNXSVRDSF9PTl9QQUNLRVQiLCAiRjJFOEUwMDExIik7DQpkZWZpbmUoIlNXSVRDSF9PRkZfUEFDS0VUIiwgIkYyRThFMDAwMCIpOw0KDQovKioNCiAqIENsYXNzIHRvIHNoYXJlIGRhdGEgYmV0d2VlbiB0aGUgbWFpbiBzY3JpcHQgYW5kIHRoZSByZWFkIHRocmVhZC4NCiAqLw0KY2xhc3MgU2hhcmVkRGF0YSBleHRlbmRzIFRocmVhZGVkDQp7DQogICAgcHVibGljICRoYW5kbGU7DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gcnVuKCkge30NCn0NCg0KLyoqDQogKiBDbGFzcyB0byBwcm9jZXNzIGV2ZW50cyByZWNlaXZlZCBmcm9tIEhvbWVnZWFyDQogKi8NCmNsYXNzIFJlYWRUaHJlYWQgZXh0ZW5kcyBUaHJlYWQNCnsNCiAgICBwcml2YXRlICRzaGFyZWREYXRhOw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkc2hhcmVkRGF0YSkNCiAgICB7DQogICAgICAgICR0aGlzLT5zaGFyZWREYXRhID0gJHNoYXJlZERhdGE7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBmdW5jdGlvbiBydW4oKQ0KICAgIHsNCiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IEhvbWVnZWFyIG9iamVjdA0KICAgICAgICAkaGcgPSBuZXcgXEhvbWVnZWFyXEhvbWVnZWFyOw0KDQogICAgICAgIC8vSW4gdGhpcyBzcGVjaWFsIGNhc2UsIG5vICJyZWdpc3RlclRocmVhZCIgaXMgbmVjZXNzYXJ5Lg0KICAgICAgICAvL1RvIGNhbGwgUlBDIG1ldGhvZHMsIHBsYWNlIGEgY2FsbCB0byAicmVnaXN0ZXJUaHJlYWQiIGhlcmUuDQogICAgICAgIA0KICAgICAgICAvLyBDcmVhdGUgYSBuZXcgSG9tZWdlYXJTZXJpYWwgb2JqZWN0Lg0KICAgICAgICAkc2VyaWFsID0gbmV3IFxIb21lZ2VhclxIb21lZ2VhclNlcmlhbCgpOw0KDQogICAgICAgIC8vIFJ1biB0aGUgdGhyZWFkIHVudGlsIEhvbWVnZWFyIHNodXRzIGRvd24uDQogICAgICAgIHdoaWxlKCEkaGctPnNodXR0aW5nRG93bigpKQ0KICAgICAgICB7DQogICAgICAgICAgICAkcmVzdWx0ID0gJHNlcmlhbC0+cmVhZGxpbmUoJHRoaXMtPnNoYXJlZERhdGEtPmhhbmRsZSwgNTAwMCk7DQogICAgICAgICAgICBpZigkcmVzdWx0ID09PSAtMSkgLy8gUmVhZCBlcnJvcg0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIFJlb3BlbiBkZXZpY2UNCiAgICAgICAgICAgICAgICAkc2VyaWFsLT5jbG9zZSgkdGhpcy0+c2hhcmVkRGF0YS0+aGFuZGxlKTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+c2hhcmVkRGF0YS0+aGFuZGxlID0gJHNlcmlhbC0+b3BlbihDVUxfREVWSUNFLCAzODQwMCk7DQoNCiAgICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIEZTMjAgcGFja2V0cw0KICAgICAgICAgICAgICAgICRzZXJpYWwtPndyaXRlKCR0aGlzLT5zaGFyZWREYXRhLT5oYW5kbGUsICJYMjFcbiIpOw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZigkcmVzdWx0ICE9PSAtMikgLy8gVGltZW91dD8NCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkaGctPmxvZyg0LCAiRlMyMCBwYWNrZXQgcmVjZWl2ZWQ6ICIudHJpbSgkcmVzdWx0KSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlICRoZy0+bG9nKDQsICJUaW1lb3V0LiIpOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQovLyBDcmVhdGUgYSBuZXcgSG9tZWdlYXIgb2JqZWN0DQokaGcgPSBuZXcgXEhvbWVnZWFyXEhvbWVnZWFyOw0KDQovLyBDcmVhdGUgYSBuZXcgSG9tZWdlYXJTZXJpYWwgb2JqZWN0Lg0KJHNlcmlhbCA9IG5ldyBcSG9tZWdlYXJcSG9tZWdlYXJTZXJpYWwoKTsNCg0KLy8gQ3JlYXRlIG5ldyBvYmplY3QgZm9yIHNoYXJpbmcgZGF0YSBiZXR3ZWVuIG1haW4gYW5kIGV2ZW50IHRocmVhZC4NCiRzaGFyZWREYXRhID0gbmV3IFNoYXJlZERhdGEoKTsNCg0KLy8gT3BlbiB0aGUgc2VyaWFsIGRldmljZSBhbmQgc2V0IHNwZWVkIHRvIDM4NDAwIGJhdWQuIFN0b3JlIHRoZSByZXR1cm5lZCBoYW5kbGUgaW4gJHNoYXJlZERhdGEuDQokc2hhcmVkRGF0YS0+aGFuZGxlID0gJHNlcmlhbC0+b3BlbihDVUxfREVWSUNFLCAzODQwMCk7DQppZigkc2hhcmVkRGF0YS0+aGFuZGxlID09PSBmYWxzZSkgZGllKCJDb3VsZCBub3Qgb3BlbiBzZXJpYWwgZGV2aWNlLiIpOw0KDQovLyBMaXN0ZW4gZm9yIEZTMjAgcGFja2V0cw0KJHNlcmlhbC0+d3JpdGUoJHNoYXJlZERhdGEtPmhhbmRsZSwgIlgyMVxuIik7DQoNCi8vIENyZWF0ZSBhbmQgc3RhcnQgbmV3IHJlYWQgdGhyZWFkLg0KJHRocmVhZCA9IG5ldyBSZWFkVGhyZWFkKCRzaGFyZWREYXRhKTsNCiR0aHJlYWQtPnN0YXJ0KCk7DQoNCiRvbiA9IGZhbHNlOw0KDQovLyBSdW4gbWFpbiB0aHJlYWQgdW50aWwgSG9tZWdlYXIgc2h1dHMgZG93bi4NCndoaWxlKCEkaGctPnNodXR0aW5nRG93bigpKQ0Kew0KICAgIC8vIFdhaXQgdG8gYmUgbm90aWZpZWQgYnkgZXZlbnQgdGhyZWFkIHdpdGggYSB0aW1lb3V0IG9mIDUgc2Vjb25kcy4NCiAgICAkdGhyZWFkLT5zeW5jaHJvbml6ZWQoZnVuY3Rpb24oJHRocmVhZCl7ICR0aHJlYWQtPndhaXQoNTAwMDAwMCk7IH0sICR0aHJlYWQpOw0KICAgIA0KICAgIGlmKCEkb24pIC8vIFN3aXRjaCBvbg0KICAgIHsNCiAgICAgICAgJGhnLT5sb2coNCwgIlNlbmRpbmcgXCJzd2l0Y2ggb24gcGFja2V0XCIuLi4iKTsNCiAgICAgICAgaWYoJHNlcmlhbC0+d3JpdGUoJHNoYXJlZERhdGEtPmhhbmRsZSwgU1dJVENIX09OX1BBQ0tFVC4iXG4iKSA9PT0gZmFsc2UpDQogICAgICAgIHsNCiAgICAgICAgICAgICRoZy0+bG9nKDIsICJFcnJvciB3cml0aW5nIHRvIENVTCBzdGljay4iKTsNCiAgICAgICAgfQ0KICAgICAgICAkb24gPSB0cnVlOw0KICAgIH0NCiAgICBlbHNlIC8vIFN3aXRjaCBvZmYNCiAgICB7IA0KICAgICAgICAkaGctPmxvZyg0LCAiU2VuZGluZyBcInN3aXRjaCBvZmYgcGFja2V0XCIuLi4iKTsNCiAgICAgICAgaWYoJHNlcmlhbC0+d3JpdGUoJHNoYXJlZERhdGEtPmhhbmRsZSwgU1dJVENIX09GRl9QQUNLRVQuIlxuIikgPT09IGZhbHNlKQ0KICAgICAgICB7DQogICAgICAgICAgICAkaGctPmxvZygyLCAiRXJyb3Igd3JpdGluZyB0byBDVUwgc3RpY2suIik7DQogICAgICAgIH0NCiAgICAgICAgJG9uID0gZmFsc2U7DQogICAgfQ0KfQ0KDQovLyBXYWl0IGZvciBldmVudCB0aHJlYWQgdG8gZmluaXNoLg0KJHRocmVhZC0+am9pbigpOw0KPz4="
}
